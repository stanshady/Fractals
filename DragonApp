import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

import java.util.ArrayList;

public class Dragon extends Application {

    private Pane root;
    private ArrayList<DragonLine> dragonCurve;
    private Pane[] panes;
    private final int MAX_ITERATION = 18;
    private int iteration;

    private Parent initRoot() {
        root = new Pane();
        root.setPrefSize(1000, 1000);
        dragonCurve = new ArrayList<>();

        //baseLine is initial line at iteration == 0
        DragonLine baseLine = new DragonLine(250, 400, 750, 400, 0);
        baseLine.setStroke(Color.BLACK);
        dragonCurve.add(baseLine);

        fillPanes();
        root.getChildren().addAll(panes[0]);

        iteration = 0;
        root.setOnMouseClicked(event -> {
            if(event.getButton() == MouseButton.PRIMARY) {
                if (iteration >= MAX_ITERATION - 1)
                    return;

                iterationPlusPlus();
                root.getChildren().clear();
                root.getChildren().addAll(panes[iteration]);
            }

            else if(event.getButton() == MouseButton.SECONDARY) {
                if (iteration <= 0)
                    return;

                iterationMinusMinus();
                root.getChildren().clear();
                root.getChildren().addAll(panes[iteration]);
            }
        });

        return root;
    }

    public void iterationPlusPlus(){
        iteration++;
    }

    public void iterationMinusMinus(){
        iteration--;
    }

    //Run updateCurve MAX_ITERATION times and fill
    //panes[i] with a dragoncurve of i iterations.
    public void fillPanes(){
        panes = new Pane[MAX_ITERATION];

        Pane pane = new Pane();
        pane.getChildren().addAll(dragonCurve);
        panes[0] = pane;

        for(int i = 1; i < MAX_ITERATION; i++){
            updateCurve();
            pane = new Pane();
            pane.getChildren().addAll(dragonCurve);
            panes[i] = pane;
            }
    }

    public void updateCurve() {

        ArrayList<DragonLine> nextLayer = new ArrayList<>();
        boolean positive = false;

        for (DragonLine line : dragonCurve) {
            DragonLine nextLine0 = line.rotateAndScale(positive);
            DragonLine nextLine1;

            if (positive) {
                nextLine1 = new DragonLine(nextLine0.getEndX(),
                        nextLine0.getEndY(),
                        nextLine0.getEndX() + nextLine0.dist() * Math.cos(((nextLine0.angle - 2) % 8) * Math.PI * 0.25),
                        nextLine0.getEndY() - nextLine0.dist() * Math.sin(((nextLine0.angle - 2) % 8) * Math.PI * 0.25),
                        (nextLine0.angle - 2) % 8);
            } else {
                nextLine1 = new DragonLine(nextLine0.getEndX(),
                        nextLine0.getEndY(),
                        nextLine0.getEndX() + nextLine0.dist() * Math.cos(((nextLine0.angle + 2) % 8) * Math.PI * 0.25),
                        nextLine0.getEndY() - nextLine0.dist() * Math.sin(((nextLine0.angle + 2) % 8) * Math.PI * 0.25),
                        (nextLine0.angle + 2) % 8);
            }

            nextLayer.add(nextLine0);
            nextLayer.add(nextLine1);
            positive = !positive;
        }

        dragonCurve.clear();
        dragonCurve = nextLayer;
    }

    private class DragonLine extends Line {

        //angle is the int n for n*pi/4
        private int angle;

        DragonLine(double x0, double y0, double x1, double y1, int angle) {
            super(x0, y0, x1, y1);
            this.angle = angle;
        }

        public double dist() {
            return Math.sqrt((this.getEndX() - this.getStartX()) * (this.getEndX() - this.getStartX()) +
                    (this.getEndY() - this.getStartY()) * (this.getEndY() - this.getStartY()));
        }

        //positive is counter-clockwise
        public DragonLine rotateAndScale(boolean positive) {
            DragonLine ret = new DragonLine(0, 0, 0, 0, 0);

            double x = this.getStartX();
            double y = this.getStartY();

            ret.setStartX(x);
            ret.setStartY(y);
            double dist = this.dist();

            if (positive) {
                ret.setEndX(x + Math.sqrt(2) * 0.5 * dist * Math.cos((this.angle + 1) * Math.PI * 0.25));
                ret.setEndY(y - Math.sqrt(2) * 0.5 * dist * Math.sin((this.angle + 1) * Math.PI * 0.25));
                ret.setAngle((this.angle + 1) % 8);
            } else {
                ret.setEndX(x + Math.sqrt(2) * 0.5 * dist * Math.cos((this.angle - 1) * Math.PI * 0.25));
                ret.setEndY(y - Math.sqrt(2) * 0.5 * dist * Math.sin((this.angle - 1) * Math.PI * 0.25));
                ret.setAngle((this.angle - 1) % 8);
            }

            return ret;
        }

        public void setAngle(int angle) {
            this.angle = angle;
        }
    }


    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(initRoot()));
        primaryStage.show();
    }
}
