package Fractals;

import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.transform.Rotate;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.util.ArrayList;


//rather sloppy overall.  Angle is sometimes
//and int and sometimes a multiple of 45.
//Should be broken down to at least two classes

public class DragonAnimate extends Application {

    private Pane root;
    private ArrayList<DragonLine> dragonCurve;
    private Pane[] panes;
    private final int MAX_ITERATION = 17;
    private int iteration;


    private Parent initRoot() {
        root = new Pane();
        root.setPrefSize(1000, 1000);
        dragonCurve = new ArrayList<>();

        //baseLine is initial line at iteration == 0
        DragonLine baseLine = new DragonLine(250, 300, 650, 300, 0);
        baseLine.setStroke(Color.BLACK);
        dragonCurve.add(baseLine);

        root.getChildren().addAll(dragonCurve);

        iteration = 0;
        root.setOnMouseClicked(event -> {
            if (event.getButton() == MouseButton.PRIMARY) {
                if (iteration >= MAX_ITERATION - 1)
                    return;

                root.getChildren().clear();
                root.getChildren().addAll(dragonCurve);
                boolean positive = false;
                for (int i = 0; i < dragonCurve.size(); i++) {
                    DragonLine original = dragonCurve.get(i);
                    DragonLine scaled = original.scale();
                    DragonLine target = original.rotateAndScale(positive);
                    DragonLine newLine = target.buildNewLine(positive);
                    animateNextIteration(original, scaled, target, newLine, positive);
                    positive = !positive;
                }

                updateCurve();
                iterationPlusPlus();

            }
            //I used this in the old version
            else if (event.getButton() == MouseButton.SECONDARY) {
                if (iteration <= 0)
                    return;

                iterationMinusMinus();
                root.getChildren().clear();
                root.getChildren().addAll(panes[iteration]);
            }
        });

        return root;
    }

    public void iterationPlusPlus() {
        iteration++;
    }

    public void iterationMinusMinus() {
        iteration--;
    }

    //Run updateCurve MAX_ITERATION times and fill
    //panes[i] with a dragoncurve of i iterations.
    //Only used in old version
    public void fillPanes() {
        panes = new Pane[MAX_ITERATION];

        Pane pane = new Pane();
        pane.getChildren().addAll(dragonCurve);
        panes[0] = pane;

        for (int i = 1; i < MAX_ITERATION; i++) {
            updateCurve();
            pane = new Pane();
            pane.getChildren().addAll(dragonCurve);
            panes[i] = pane;
        }
    }

    public void updateCurve() {
        ArrayList<DragonLine> nextLayer = new ArrayList<>();
        boolean positive = false;

        for (DragonLine line : dragonCurve) {
            DragonLine target = line.rotateAndScale(positive);
            DragonLine newLine = target.buildNewLine(positive);

            nextLayer.add(target);
            nextLayer.add(newLine);
            positive = !positive;
        }

        dragonCurve.clear();
        dragonCurve = nextLayer;
    }

    public void animateNextIteration(DragonLine original,
                                     DragonLine scaled,
                                     DragonLine target,
                                     DragonLine newLine,
                                     boolean positive) {

        Timeline tlScale, tlRotate, tlNewLine;

        tlScale = new Timeline();
        KeyFrame endFrame = new KeyFrame(Duration.millis(500),
                new KeyValue(original.endXProperty(), scaled.getEndX()),
                new KeyValue(original.endYProperty(), scaled.getEndY()));
        tlScale.getKeyFrames().addAll(endFrame);
        tlScale.play();

        Rotate rotate = new Rotate(0, original.getStartX(), original.getStartY());
        original.getTransforms().add(rotate);
        double newAngle;
        if (positive)
            newAngle = -45;
        else
            newAngle = 45;

        tlRotate = new Timeline();
        endFrame = new KeyFrame(Duration.millis(500),
                new KeyValue(rotate.angleProperty(), newAngle));
        tlRotate.getKeyFrames().addAll(endFrame);
        tlRotate.setDelay(Duration.millis(600));
        tlRotate.play();

        tlNewLine = new Timeline();
        DragonLine temp = new DragonLine(newLine.getStartX(),
                newLine.getStartY(),
                newLine.getStartX(),
                newLine.getStartY(), newLine.angle * 45);
        temp.setOpacity(0);
        root.getChildren().addAll(temp);

        //in order to hide the dots that are made from temp
        Timeline hideTemp = new Timeline();
        KeyFrame end = new KeyFrame(Duration.millis(1),
                new KeyValue(temp.opacityProperty(),1));
        hideTemp.getKeyFrames().addAll(end);
        hideTemp.setDelay(Duration.millis(1200));
        hideTemp.play();

        endFrame = new KeyFrame(Duration.millis(500),
                new KeyValue(temp.endXProperty(), newLine.getEndX()),
                new KeyValue(temp.endYProperty(), newLine.getEndY()));
        tlNewLine.getKeyFrames().addAll(endFrame);
        tlNewLine.setDelay(Duration.millis(1200));
        tlNewLine.play();
    }

    private class DragonLine extends Line {

        //angle is the int n for n*pi/4
        private int angle;

        DragonLine(double x0, double y0, double x1, double y1, int angle) {
            super(x0, y0, x1, y1);
            this.angle = angle;
        }

        public double dist() {
            return Math.sqrt((this.getEndX() - this.getStartX()) * (this.getEndX() - this.getStartX()) +
                    (this.getEndY() - this.getStartY()) * (this.getEndY() - this.getStartY()));
        }

        public DragonLine scale() {
            DragonLine ret = new DragonLine(0, 0, 0, 0, 0);
            ret.setStartX(this.getStartX());
            ret.setStartY(this.getStartY());
            ret.setAngle(this.angle);

            ret.setEndX(this.getStartX() + Math.sqrt(2) * 0.5 * this.dist() * Math.cos(this.angle * Math.PI * 0.25));
            ret.setEndY(this.getStartY() - this.dist() * Math.sqrt(2) * 0.5 * Math.sin(this.angle * Math.PI * 0.25));
            ret.setStroke(Color.RED);
            return ret;
        }

        //positive is counter-clockwise
        public DragonLine rotateAndScale(boolean positive) {
            DragonLine ret = new DragonLine(0, 0, 0, 0, 0);

            double x = this.getStartX();
            double y = this.getStartY();

            ret.setStartX(x);
            ret.setStartY(y);
            double dist = this.dist();

            if (positive) {
                ret.setEndX(x + Math.sqrt(2) * 0.5 * dist * Math.cos((this.angle + 1) * Math.PI * 0.25));
                ret.setEndY(y - Math.sqrt(2) * 0.5 * dist * Math.sin((this.angle + 1) * Math.PI * 0.25));
                ret.setAngle((this.angle + 1) % 8);
            } else {
                ret.setEndX(x + Math.sqrt(2) * 0.5 * dist * Math.cos((this.angle - 1) * Math.PI * 0.25));
                ret.setEndY(y - Math.sqrt(2) * 0.5 * dist * Math.sin((this.angle - 1) * Math.PI * 0.25));
                ret.setAngle((this.angle - 1) % 8);
            }
            return ret;
        }

        public DragonLine buildNewLine(boolean positive) {
            DragonLine ret = new DragonLine(0, 0, 0, 0, 0);

            double x = this.getEndX();
            double y = this.getEndY();

            ret.setStartX(x);
            ret.setStartY(y);
            double dist = this.dist();

            if (positive) {
                ret = new DragonLine(x,
                        y,
                        x + dist() * Math.cos(((this.angle - 2) % 8) * Math.PI * 0.25),
                        y - dist() * Math.sin(((this.angle - 2) % 8) * Math.PI * 0.25),
                        (this.angle - 2) % 8);
            } else {
                ret = new DragonLine(x,
                        y,
                        x + dist() * Math.cos(((this.angle + 2) % 8) * Math.PI * 0.25),
                        y - dist() * Math.sin(((this.angle + 2) % 8) * Math.PI * 0.25),
                        (this.angle + 2) % 8);
            }
            return ret;
        }

        public void setAngle(int angle) {
            this.angle = angle;
        }

        public int getAngle() {
            return angle;
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(initRoot()));
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
