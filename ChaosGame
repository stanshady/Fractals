package Fractals;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import javafx.util.Duration;

public class ChaosGame extends Application {

    private Pane root;
    private Circle[] dots;
    private int index, iter;
    private Timeline timer;

    private Parent initRoot(){

        root = new Pane();
        root.setPrefSize(1000, 1000);

        index = 0;
        iter = 100000;
        dots = new Circle[iter];

        //Set position of three vertices a, b, c.
        //Currently equilateral triangle with len = 800
        double a_x = 100;
        double a_y = 100 + Math.sqrt(3) * 800 / 2;
        double b_x = 500;
        double b_y = 100;
        double c_x = 900;
        double c_y = 100 + Math.sqrt(3) * 800 / 2;

        //Set initial position.
        double posX = 500;
        double posY = 100 + Math.sqrt(3) * 800 / 2;

        //Main loop of ChaosGame
        for(int i = 0; i < iter; i++){
            //rand: 0 == a, 1 == b, 2 == c
            int rand = (int)(Math.random()*3);
            if(rand == 0){
                posX = (posX + a_x)/2;
                posY = (posY + a_y)/2;
            }
            else if(rand == 1){
                posX = (posX + b_x)/2;
                posY = (posY + b_y)/2;
            }
            else{ //rand == 2
                posX = (posX + c_x)/2;
                posY = (posY + c_y)/2;
            }

            Circle dot = new Circle(posX, posY,1);
            dot.setOpacity(0);

            dots[i] = dot;
            root.getChildren().add(dot);
        }

        //Should put in separate method
        //Creates delay between displaying dots
        //Would like to have manual control in the future.

        setUpTimer(100);
        
        Button slow = new Button("slow");
        slow.setOnAction(event -> {
            timer.stop();
            setUpTimer(1000);
        });

        Button medium = new Button("medium");
        medium.setOnAction(event -> {
            timer.stop();
            setUpTimer(10);
        });

        Button fast = new Button("fast");
        fast.setOnAction(event -> {
            timer.stop();
            setUpTimer(1);
        });

        Button noDelay = new Button("no delay");
        noDelay.setOnAction(event -> {
            timer.stop();
            while(index < iter){
                dots[index].setOpacity(1);
                index++;
            }
        });

        VBox vBox = new VBox(5);
        vBox.getChildren().addAll(slow,medium,fast,noDelay);

        root.getChildren().addAll(vBox);
        
        return root;
    }

    private void setUpTimer(int speed){
        timer = new Timeline(new KeyFrame(Duration.millis(speed), event -> {
            if (index >= iter) {
                event.consume();
            }
            else {
                dots[index].setOpacity(1);
                index++;
            }
        }));
        timer.setCycleCount(Timeline.INDEFINITE);
        timer.play();
    }


    @Override
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(initRoot()));
        primaryStage.show();
    }

    public static void main(String[] args){
        launch(args);
    }
}
